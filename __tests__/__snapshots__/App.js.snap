// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#d1ede1",
      "flex": 1,
      "justifyContent": "space-evenly",
      "paddingBottom": 20,
      "paddingTop": 50,
    }
  }
>
  <Text
    style={
      Object {
        "alignSelf": "center",
        "color": "#003E19",
        "fontFamily": "Arial",
        "fontSize": 25,
        "fontWeight": "bold",
        "textAlign": "center",
        "width": 750,
      }
    }
  >
    Ngrams Generator
  </Text>
  <TextInput
    allowFontScaling={true}
    multiline={true}
    onChangeText={[Function]}
    placeholder="Type in the text"
    rejectResponderTermination={true}
    style={
      Object {
        "backgroundColor": "white",
        "borderColor": "black",
        "borderRadius": 10,
        "borderWidth": 1,
        "color": "#003E19",
        "flex": 1,
        "fontFamily": "Arial",
        "fontSize": 16,
        "marginVertical": 10,
        "maxHeight": 75,
        "width": 720,
      }
    }
    underlineColorAndroid="transparent"
    value=""
  />
  <View
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "space-evenly",
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Generate N-grams
        </Text>
      </View>
    </View>
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Clear
        </Text>
      </View>
    </View>
  </View>
  <RCTScrollView
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={true}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "flex": 1,
        "height": 1334,
        "width": 720,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;
